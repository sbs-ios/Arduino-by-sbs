const byte rows[] = {2,3,4,5,6,7,8,9};
const byte col[] = {10,11,12,13,A0,A1,A2,A3};



 

onst byte SBS[64][8] = { 
 {B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000}, 
 {B00000011,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000}, 
 {B00000111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000}, 
 {B00001111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000}, 
 {B00011111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000}, 
 {B00111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000}, 
 {B01111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000}, 
 {B11111111,B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000}, 
 {B11111111,B10000000,B10000000,B00000000,B00000000,B00000000,B00000000,B00000000}, 
 {B11111111,B10000000,B10000000,B10000000,B00000000,B00000000,B00000000,B00000000}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B00000000,B00000000,B00000000}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B10000000,B00000000,B00000000}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B00000000}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B11000000}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B11100000}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B11110000}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B11111000}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B11111100}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B11111110}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B11111111}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B10000000,B10000001,B11111111}, 
 {B11111111,B10000000,B10000000,B10000000,B10000000,B10000001,B10000001,B11111111}, 
 {B11111111,B10000000,B10000000,B10000000,B10000001,B10000001,B10000001,B11111111}, 
 {B11111111,B10000000,B10000000,B10000001,B10000001,B10000001,B10000001,B11111111}, 
 {B11111111,B10000000,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111}, 
 {B11111111,B10000001,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111}, 
 {B11111111,B10000011,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111}, 
 {B11111111,B10000111,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111}, 
 {B11111111,B10001111,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111}, 
 {B11111111,B10011111,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111}, 
 {B11111111,B10111111,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111}, 
 {B11111111,B11111111,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111}, 
 {B11111111,B11111111,B11000001,B10000001,B10000001,B10000001,B10000001,B11111111}, 
 {B11111111,B11111111,B11000001,B11000001,B10000001,B10000001,B10000001,B11111111}, 
 {B11111111,B11111111,B11000001,B11000001,B11000001,B10000001,B10000001,B11111111}, 
 {B11111111,B11111111,B11000001,B11000001,B11000001,B11000001,B10000001,B11111111}, 
 {B11111111,B11111111,B11000001,B11000001,B11000001,B11000001,B11000001,B11111111}, 
 {B11111111,B11111111,B11000001,B11000001,B11000001,B11000001,B11100001,B11111111}, 
 {B11111111,B11111111,B11000001,B11000001,B11000001,B11000001,B11110001,B11111111}, 
 {B11111111,B11111111,B11000001,B11000001,B11000001,B11000001,B11111001,B11111111}, 
 {B11111111,B11111111,B11000001,B11000001,B11000001,B11000001,B11111101,B11111111}, 
 {B11111111,B11111111,B11000001,B11000001,B11000001,B11000001,B11111111,B11111111}, 
 {B11111111,B11111111,B11000001,B11000001,B11000001,B11000011,B11111111,B11111111}, 
 {B11111111,B11111111,B11000001,B11000001,B11000011,B11000011,B11111111,B11111111}, 
 {B11111111,B11111111,B11000001,B11000011,B11000011,B11000011,B11111111,B11111111}, 
 {B11111111,B11111111,B11000011,B11000011,B11000011,B11000011,B11111111,B11111111}, 
 {B11111111,B11111111,B11000111,B11000011,B11000011,B11000011,B11111111,B11111111}, 
 {B11111111,B11111111,B11001111,B11000011,B11000011,B11000011,B11111111,B11111111}, 
 {B11111111,B11111111,B11011111,B11000011,B11000011,B11000011,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11000011,B11000011,B11000011,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11100011,B11000011,B11000011,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11100011,B11100011,B11000011,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11100011,B11100011,B11100011,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11100011,B11100011,B11110011,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11100011,B11100011,B11111011,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11100011,B11100011,B11111111,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11100011,B11100111,B11111111,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11100111,B11100111,B11111111,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11101111,B11100111,B11111111,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11111111,B11100111,B11111111,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11111111,B11110111,B11111111,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111}, 
 {B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111},
 }; 
 int Length = 64;

void setup() 
{
    for (byte i = 2; i <= 17; i++)
        pinMode(i, OUTPUT);
}

void loop() {
for (byte k = 0; k<Length; k++) 
     {
      show(SBS[k]);
      delay(25);
     };
     delay(100);
}

 void  show(byte shape[])
 { 
   // Turn on each row in series
    for (byte i = 0; i < 8; i++)        // count next row
     {
        digitalWrite(rows[i], HIGH);    //initiate whole row
        for (byte a = 0; a < 8; a++)    // count next row
        {
          digitalWrite(col[a], (shape[i] >> a) & 0x01); // if You set (~buffer2[i] >> a) then You will have positive
          delayMicroseconds(250);       // uncoment deley for diferent speed of display
          digitalWrite(col[a], 1);      // reset whole column
        }
        delayMicroseconds(500); 
        digitalWrite(rows[i], LOW);     // reset whole row otherwise last row will intersect with next row
    }
}

